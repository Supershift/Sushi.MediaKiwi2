# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - main

# no PR triggers
pr: none

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: "Release"

steps:
  # Install Dependencies
  - task: NodeTool@0
    displayName: "Install Node"
    inputs:
      versionSource: "spec"
      versionSpec: "18.x"
      checkLatest: true

  - task: Npm@1
    displayName: "Npm install on MediaKiwi.Vue"
    inputs:
      command: "ci"
      workingDir: "src/Sushi.MediaKiwi.Vue"

  # Build and Pack mediakiwi-vue
  - task: Npm@1
    displayName: "Npm test on MediaKiwi.Vue"
    inputs:
      command: "custom"
      customCommand: "run test:run"
      workingDir: "src/Sushi.MediaKiwi.Vue"
    continueOnError: true

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "**/TEST-*.xml"

  - task: Npm@1
    displayName: "Npm coverage on MediaKiwi.Vue"
    inputs:
      command: "custom"
      customCommand: "run coverage"
      workingDir: "src/Sushi.MediaKiwi.Vue"
    continueOnError: true

  - task: PublishCodeCoverageResults@2
    displayName: Publish coverage results
    inputs:
      summaryFileLocation: "**/coverage/cobertura-coverage.xml"

  - task: Npm@1
    displayName: "Npm build on MediaKiwi.Vue"
    inputs:
      command: "custom"
      workingDir: "src/Sushi.MediaKiwi.Vue"
      customCommand: "run build:prd"

  - task: CopyFiles@2
    displayName: "Copy files to package"
    inputs:
      SourceFolder: "src/Sushi.MediaKiwi.Vue"
      Contents: |
        dist/**
        package.json
        README.md
      TargetFolder: "$(Build.ArtifactStagingDirectory)/mediakiwi-vue"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Mediakiwi artifact"
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)/mediakiwi-vue"
      ArtifactName: "mediakiwi-vue"
      publishLocation: "Container"

  # Build and Pack mediakiwi-azure-function
  - task: Npm@1
    displayName: "Npm test on MediaKiwi.AzureFunction"
    inputs:
      command: "custom"
      customCommand: "run test:run"
      workingDir: "src/Sushi.MediaKiwi.AzureFunction"
    continueOnError: true

  - task: Npm@1
    displayName: "Npm coverage on MediaKiwi.AzureFunction"
    inputs:
      command: "custom"
      customCommand: "run coverage"
      workingDir: "src/Sushi.MediaKiwi.AzureFunction"
    continueOnError: true

  - task: Npm@1
    displayName: "Npm build on MediaKiwi.AzureFunction"
    inputs:
      command: "custom"
      workingDir: "src/Sushi.MediaKiwi.AzureFunction"
      customCommand: "run build"

  - task: CopyFiles@2
    displayName: "Copy files to package"
    inputs:
      SourceFolder: "src/Sushi.MediaKiwi.AzureFunction"
      Contents: |
        dist/**
        package.json
        README.md
      TargetFolder: "$(Build.ArtifactStagingDirectory)/mediakiwi-azure-function"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Mediakiwi artifact"
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)/mediakiwi-azure-function"
      ArtifactName: "mediakiwi-azure-function"
      publishLocation: "Container"

  # Build and Pack SampleWeb
  - task: Npm@1
    displayName: "Npm install on SampleWeb"
    inputs:
      command: "ci"
      workingDir: "src/Sushi.MediaKiwi.SampleWeb/ClientApp"

  - task: Npm@1
    displayName: "npm build SampleWeb"
    inputs:
      command: "custom"
      workingDir: "src/Sushi.MediaKiwi.SampleWeb/ClientApp"
      customCommand: "run build"

  - task: CopyFiles@2
    displayName: "Copy files to package"
    inputs:
      SourceFolder: "src/Sushi.MediaKiwi.SampleWeb"
      Contents: |
        ClientApp/dist/**
        Function/**
      TargetFolder: "SampleWeb"

  - task: PublishPipelineArtifact@1
    displayName: "Publish SampleWeb artifact"
    inputs:
      targetPath: "SampleWeb"
      artifact: "drop"
      publishLocation: "pipeline"
